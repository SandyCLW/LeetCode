def numPairsDivisibleBy60(self, time):
        """
        :type time: List[int]
        :rtype: int
        """
        remainders = collections.defaultdict(int)
        ret = 0
        for t in time:
            if t % 60 == 0: # check if a%60==0 && b%60==0
                ret += remainders[0]
                print(ret)
                print('t % 60')
                print (remainders)
            else: # check if a%60+b%60==60
                ret += remainders[60-t%60]
                print (remainders)
            remainders[t % 60] += 1 # remember to update the remainders
            
        return ret          
        Time complexity: 

O(n), when n
n is the length of the input array, because we would visit each element in time once.
Space complexity: 

O(1), because the size of the array remainders is fixed with 
60
60. 


        
        
       Approach 1: Brute Force 
        class Solution:
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        ret, n = 0, len(time)
        for i in range(n):
            # j starts with i+1 so that i is always to the left of j
            # to avoid repetitive counting
            for j in range(i + 1, n):
                ret += (time[i] + time[j]) % 60==0
        return ret
